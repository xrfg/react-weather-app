{"version":3,"sources":["WeatherDataComponent.js","App.js","index.js"],"names":["WeatherDataComponent","nextProps","nextState","temp","this","props","city","console","log","feelsLike","src","icon","alt","humidity","pressure","maxTemp","minTemp","Component","App","state","cityName","weatherData","getUserCity","e","setState","target","value","formSubmission","preventDefault","trim","fetchWeatherData","fetch","process","then","response","json","data","catch","err","onSubmit","type","placeholder","onChange","main","temp_max","temp_min","feels_like","weather","reactDOM","render","document","getElementById"],"mappings":"8JAEqBA,E,2KACnB,SAAsBC,EAAWC,GAC/B,OACED,EAAUE,OAASC,KAAKC,MAAMF,MAC9BF,EAAUK,OAASF,KAAKC,MAAMC,O,oBAOlC,WAEE,OADAC,QAAQC,IAAI,uBAEV,6BACE,yCACcJ,KAAKC,MAAMI,UADzB,WACyCL,KAAKC,MAAMC,MAEpD,yBACEI,IAAG,4CAAuCN,KAAKC,MAAMM,KAAlD,WACHC,IAAI,UAEN,6BACE,4BAAKR,KAAKC,MAAMF,KAAhB,SAEF,6BACE,wCAAcC,KAAKC,MAAMQ,SAAzB,KACA,wCAAcT,KAAKC,MAAMS,UACzB,mDAAyBV,KAAKC,MAAMU,QAApC,QACA,mDAAyBX,KAAKC,MAAMW,QAApC,c,GA7BwCC,aCI7BC,E,4MACnBC,MAAQ,CACNC,SAAU,GACVC,YAAa,M,EAGfC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZJ,SAAUG,EAAEE,OAAOC,S,EAIvBC,eAAiB,SAACJ,GAChBA,EAAEK,iBACFrB,QAAQC,IAAI,kBACZD,QAAQC,IAAI,EAAKW,MAAMC,UACY,KAA/B,EAAKD,MAAMC,SAASS,QAEtB,EAAKC,iBAAiB,EAAKX,MAAMC,W,EAGrCU,iBAAmB,SAACxB,GAElByB,MAAM,qDAAD,OACkDzB,EADlD,kBACgE0B,mCADhE,kBAGFC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKZ,SAAS,CAAEH,YAAae,OAC5CC,OAAM,SAACC,GAAD,OAAS/B,QAAQC,IAAI8B,O,uDAGhC,WAEElC,KAAK0B,iBAAiB,Y,oBAGxB,WACEvB,QAAQC,IAAI,iBACZ,IAAI4B,EAAOhC,KAAKe,MAAME,YAEtB,OACE,6BACE,2CAEA,0BAAMkB,SAAUnC,KAAKuB,gBACnB,2BACEa,KAAK,OACLC,YAAY,uBACZC,SAAUtC,KAAKkB,cAEjB,qDAGDc,GACC,kBAAC,EAAD,CACE9B,KAAMF,KAAKe,MAAMC,SACjBjB,KAAMiC,EAAKO,KAAKxC,KAChBY,QAASqB,EAAKO,KAAKC,SACnB5B,QAASoB,EAAKO,KAAKE,SACnBhC,SAAUuB,EAAKO,KAAK9B,SACpBJ,UAAW2B,EAAKO,KAAKG,WACrBhC,SAAUsB,EAAKO,KAAK7B,SACpBH,KAAMyB,EAAKW,QAAQ,GAAGpC,Y,GA9DDM,a,cCDjC+B,EAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,U","file":"static/js/main.8c686d03.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class WeatherDataComponent extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      nextProps.temp === this.props.temp &&\n      nextProps.city === this.props.city\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  render() {\n    console.log(\"rendering Component\");\n    return (\n      <div>\n        <p>\n          Feels like {this.props.feelsLike}째 in {this.props.city}\n        </p>\n        <img\n          src={`https://openweathermap.org/img/wn/${this.props.icon}@4x.png`}\n          alt=\"tasod\"\n        />\n        <div>\n          <h3>{this.props.temp}째</h3>\n        </div>\n        <div>\n          <p>Humidity: {this.props.humidity}%</p>\n          <p>Pressure: {this.props.pressure}</p>\n          <p>Maximum Temperature: {this.props.maxTemp}째</p>\n          <p>Minimum Temperature: {this.props.minTemp}째</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport WeatherDataComponent from \"./WeatherDataComponent\";\n\n/* let apiKey = \"81bfc0657764996ce2ed462fc44ded6a\";\nconsole.log(process); */\n\nexport default class App extends Component {\n  state = {\n    cityName: \"\",\n    weatherData: null,\n  };\n\n  getUserCity = (e) => {\n    this.setState({\n      cityName: e.target.value,\n    });\n  };\n\n  formSubmission = (e) => {\n    e.preventDefault();\n    console.log(\"form submitted\");\n    console.log(this.state.cityName);\n    if (this.state.cityName.trim() !== \"\")\n      // if there is nothing in the input, do nothing, otherwise fetch the data according to the input\n      this.fetchWeatherData(this.state.cityName);\n  };\n\n  fetchWeatherData = (city) => {\n    // fetching weather info from openweathermap api\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_API_KEY}&units=metric`\n    )\n      .then((response) => response.json())\n      .then((data) => this.setState({ weatherData: data }))\n      .catch((err) => console.log(err));\n  };\n\n  componentDidMount() {\n    //onload\n    this.fetchWeatherData(\"berlin\");\n  }\n\n  render() {\n    console.log(\"rendering APP\");\n    let data = this.state.weatherData; // destructuring\n\n    return (\n      <div>\n        <h1>Weather App</h1>\n\n        <form onSubmit={this.formSubmission}>\n          <input\n            type=\"text\"\n            placeholder=\"Enter Your City Name\"\n            onChange={this.getUserCity}\n          />\n          <button>Get Weather Data</button>\n        </form>\n\n        {data && (\n          <WeatherDataComponent\n            city={this.state.cityName}\n            temp={data.main.temp}\n            maxTemp={data.main.temp_max}\n            minTemp={data.main.temp_min}\n            humidity={data.main.humidity}\n            feelsLike={data.main.feels_like}\n            pressure={data.main.pressure}\n            icon={data.weather[0].icon}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","\nimport React from \"react\"\nimport App from \"./App.js\"\nimport reactDOM from \"react-dom\"\n\nreactDOM.render(<App/>,document.getElementById(\"root\"))"],"sourceRoot":""}